Compiling OctaForge
********************

Officially supported platforms for OctaForge (those which include/will include binaries) are currently Linux, FreeBSD, Windows and Mac OS X.

It should work without problems also on Solaris and other UNIX-like or UNIX systems.

For different platforms, compilation instructions might differ a bit, so separate OSes will be explained separately.

For all OSes
============

1. In all cases, you need to get source code. 
   You can use either release tarball or Git source versioning system to get source code.
   (Git will get you most recent source)

   To get source from Git, use:

   .. code-block :: bash

       $ git clone git://github.com/OctaForge/OF-Engine.git

   It assumes you have Git installed. (http://git-scm.com).
   If you're using Windows, you can use TortoiseGit GUI to make download easier.
   On Mac, you can get packages for example here http://code.google.com/p/git-osx-installer/

Linux, BSD, Solaris and other UNIX-like or UNIX systems (excluding Darwin)
==========================================================================

On these OSes compilation should be really trivial.
Instructions assume Linux with deb packaging system,
with little modifications it should work everywhere.

1. Open terminal window and get some dependencies to build.

   .. code-block :: bash

       $ sudo apt-get install build-essential libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev zlib1g-dev

   If I list the dependencies (for other OSes), they are:

   1. build-essential - on Debian, metapackage installing GNU compiler set and a few other things.
      Basically basic things you need to build sources.
   2. SDL dev package, SDL_image dev package, SDL_mixer dev package
   3. Zlib dev libraries and headers

2. Open a terminal, build OF:

   .. code-block :: bash

       $ cd $HOME/OctaForge_source/src
       $ make install -s

   If you have a multicore processor, you can use -jNUMCORES+1 as make argument.
   On some systems (like FreeBSD), you'll have to use "gmake" instead of "make".
   Remove the -s for verbose builds.

3. You're done, you should have binaries in OFROOT/bin_unix.

Windows
=======

On Windows, you don't need to get dependencies, they're bundled.

You can proceed right with compilation, which is done using MinGW.

OF supports just 32bit binaries currently. You can use/build 32bit binaries on
64-bit Windows too, so it's not a big problem for now. The guide assumes 32bit Windows,
but it should be the same or almost the same on 64bit Windows too.

So the steps are:

1. Install latest MinGW distribution whichever way you want. You need just the core (C/C++ support).
   You can install it wherever you want, but make sure to change steps of this guide accordingly after that.

2. Append this into your PATH environment variable. (modify path if needed)

   .. code-block :: bash

       ;C:\mingw\bin

3. Open a cmd, go to OFROOT\src, type

   .. code-block :: bash

       $ mingw32-make install -s

   If you have a multicore processor, you can use -jNUMCORES+1 as make argument.
   Remove the -s for verbose builds.

Mac OS X (Darwin)
=================

1. You'll need to get some dependencies, first. (I assume you've got OF repository already downloaded)
    1. XCode SDK installed (from Mac OS X DVD or XCode developer DVD).
    2. The needed SDL dmg files - http://www.libsdl.org/release/SDL-1.2.14.dmg , 
       http://www.libsdl.org/projects/SDL_image/release/SDL_image-1.2.10.dmg , 
       http://www.libsdl.org/projects/SDL_mixer/release/SDL_mixer-1.2.11.dmg
       
       Put the SDL.framework, SDL_mixer.framework and SDL_image.framework from the dmgs to /Library/Frameworks.

2. Go to OF's src directory in the terminal and do

   .. code-block :: bash

       $ make install -s

   If you have a multicore processor, you can use -jNUMCORES+1 as make argument.
   Remove the -s for verbose builds.

   After everything goes OK, you should have binaries and you can launch (run_client.command file from Finder)
