--[[!
    File: base/base_models.lua

    About: Author
        q66 <quaker66@gmail.com>

    About: Copyright
        Copyright (c) 2011 OctaForge project

    About: License
        This file is licensed under MIT. See COPYING.txt for more information.

    About: Purpose
        This file features model interface.

    Section: Model interface
]]

local base = _G

--[[!
    Package: model
    This module controls models. OctaForge currently supports 3 model formats,
    md5, smd and iqm. This as well handles some variables for culling, shadowing
    etc., general model manipulation and ragdoll control.
]]
module("model", package.seeall)

-- in sync with iengine.h
CULL_VFC = math.lsh(1, 0)
CULL_DIST = math.lsh(1, 1)
CULL_OCCLUDED = math.lsh(1, 2)
CULL_QUERY = math.lsh(1, 3)
SHADOW = math.lsh(1, 4)
DYNSHADOW = math.lsh(1, 5)
LIGHT = math.lsh(1, 6)
DYNLIGHT = math.lsh(1, 7)
FULLBRIGHT = math.lsh(1, 8)
NORENDER = math.lsh(1, 9)
LIGHT_FAST = math.lsh(1, 10)
HUD = math.lsh(1, 11)
GHOST = math.lsh(1, 12)

--- Reset mapmodel counter - start counting slots from N. DEPRECATED.
-- @param n Number from which to start counting.
-- @class function
-- @name reset
reset = CAPI.mapmodelreset

--- Get number of mapmodels. DEPRECATED.
-- @return Number of mapmodels.
-- @class function
-- @name num
num = CAPI.nummapmodels

--- Clear a mapmodel. DEPRECATED.
-- @param n Name of the mapmodel.
-- @class function
-- @name clear
clear = CAPI.clearmodel

--- Preload a mapmodel. Basically, cache it before loading the world.
-- @param n Name of the mapmodel.
-- @class function
-- @name preload
preload = CAPI.preloadmodel

--- Reload a mapmodel.
-- @param n Name of the mapmodel.
-- @class function
-- @name reload
reload = CAPI.reloadmodel

--- Render a model.
-- @param ent Entity which the model belongs to.
-- @param mdl Model name.
-- @param anim Model animation (integer, see base_actions.lua)
-- @param x X coord of the model.
-- @param y Y coord of the model.
-- @param z Z coord of the model.
-- @param yaw Model yaw.
-- @param pitch Model pitch.
-- @param flags Model flags (integer) using bitwise operators, see beginning of this file for flags.
-- @param basetime Entity starttime property.
-- @class function
-- @name render
render = CAPI.rendermodel

-- Find mesh animations.
-- @param n Mesh name.
-- @return List of anims as string, items separated by whitespace.
-- @class function
-- @name findanims
findanims = CAPI.findanims

--- Create attachment string.
-- @param t Tag of the model.
-- @param n Name of the attachment.
function attachment(t, n)
    assert(not string.find(t, ","))
    assert(not string.find(n, ","))
    return t .. "," .. n
end

--- This table contains various generic
-- methods relating a single model.
-- @class table
-- @name mdl
mdl = {}

--- Get current model slot's name. DEPRECATED.
-- @class function
-- @name mdl.name
mdl.name = CAPI.mdlname

--- Set alpha testing cut-off threshold T at which alpha-channel skins will discard pixels
-- where alpha is less than T. T is a floating point value in the range of 0 to 1 (defaults to 0.9)
-- @param cutoff Cut-off threshold.
-- @class function
-- @name mdl.alphatest
mdl.alphatest = CAPI.mdlalphatest

--- Control whether a model with alpha channel skin will alpha blend (defaults to 1)
-- @param blend 1 to enable, 0 to disable.
-- @class function
-- @name mdl.alphablend
mdl.alphablend = CAPI.mdlalphablend

--- Control model alpha depth.
-- @param depth Model alpha depth.
-- @class function
-- @name mdl.alphadepth
mdl.alphadepth = CAPI.mdlalphadepth

--- Control model bounding box. If not set,
-- bounding box is generated from model's geometry.
-- @param rad Bounding box radius.
-- @param h Bounding box height.
-- @param eyeheight Fraction of model's height to be used as eyeheight (defaults to 0.9)
-- @class function
-- @name mdl.bb
mdl.bb = CAPI.mdlbb

--- Extend model bounding box.
-- @param x X coord.
-- @param y Y coord.
-- @param z Z coord.
-- @class function
-- @name mdl.extendbb
mdl.extendbb = CAPI.mdlextendbb

--- Set model scale.
-- @param p Number of percent of its default
-- size (i.e. 200 will make the model two times bigger)
-- @class function
-- @name mdl.scale
mdl.scale = CAPI.mdlscale

--- Set model specular intensity. When not given, default 100 gets applied.
-- 100 is good for shiny objects, -1 means specularity is off.
-- @param spec Specular intensity.
-- @class function
-- @name mdl.spec
mdl.spec = CAPI.mdlspec

--- Set model glowmap scale. -1 means glowmap is off. Default is 300.
-- @param g Glowmap scale.
-- @param d Glow delta.
-- @param p Glow pulse.
-- @class function
-- @name mdl.glow
mdl.glow = CAPI.mdlglow

--- Scale amount of glare generated by spec light and glare. Defaults to 1 1.
-- @param s Floating point value specifying scale of glare generated by spec light.
-- @param g Floating point value specifying scale of glare generated by glare.
-- @class function
-- @name mdl.glare
mdl.glare = CAPI.mdlglare

--- Set percent of ambient light used for shading.
-- Not given or 0 sets default of 30%, -1 means no ambient.
-- @param p Percentage of ambient light used for shading.
-- @class function
-- @name mdl.ambient
mdl.ambient = CAPI.mdlambient

--- Control back face culling.
-- @param n 1 means enabled, 0 disabled.
-- @class function
-- @name mdl.cullface
mdl.cullface = CAPI.mdlcullface

--- Set depth offset for model.
-- @param d Depth offset (integer).
-- @class function
-- @name mdl.depthoffset
mdl.depthoffset = CAPI.mdldepthoffset

--- Use a constant lighting level instead of normal lighting.
-- @param n Fullbright lighting scale, float from 0 to 1.
-- @class function
-- @name mdl.fullbright
mdl.fullbright = CAPI.mdlfullbright

--- Simple spin animation that changes yaw and pitch in N degrees per second.
-- @param yaw Change of yaw in degrees per second.
-- @param pitch Change of pitch in degrees per second.
-- @class function
-- @name mdl.spin
mdl.spin = CAPI.mdlspin

--- Set the envmap used for model. If not set, closest envmap entity or skybox will be used.
-- If mei is non-zero, blue channel of the masks is interpreted as chrome map.
-- mei (maximum envmap intensity) and mmei (minimum envmap intensity, defaults to 0) are
-- floats ranging from 0 to 1 and specify the range in which the envmapping intensity will vary
-- based on view angle. The intensity after scaling into this range is then multiplied by chrome map.
-- @param mei Maximum envmap intensity.
-- @param mmei Minimum envmap intensity.
-- @param path Path to the envmap texture. 
-- @class function
-- @name mdl.envmap
mdl.envmap = CAPI.mdlenvmap

--- Set the shader to use for rendering the model (defaults to stdmodel).
-- @param sn Shader name.
-- @class function
-- @name mdl.shader
mdl.shader = CAPI.mdlshader

--- Translate the model's center by x, y, z where x, y, z are in model units (may use floating point).
-- @param x X in model units.
-- @param y Y in model units.
-- @param z Z in model units.
-- @class function
-- @name mdl.trans
mdl.trans = CAPI.mdltrans

--- Set yaw of the model.
-- @param a The yaw angle.
-- @class function
-- @name mdl.yaw
mdl.yaw = CAPI.mdlyaw

--- Set pitch of the model.
-- @param p The pitch angle.
-- @class function
-- @name mdl.pitch
mdl.pitch = CAPI.mdlpitch

--- Enable or disable model shadow.
-- @param v 1 to enable, 0 to disable.
-- @class function
-- @name mdl.shadow
mdl.shadow = CAPI.mdlshadow

--- Enable or disable model collision.
-- @param v 1 to enable, 0 to disable.
-- @class function
-- @name mdl.collide
mdl.collide = CAPI.mdlcollide

--- Control the "per entity collision boxes" property.
-- @param v 1 to enable, 0 to disable.
-- @class function
-- @name mdl.perentitycollisionboxes
mdl.perentitycollisionboxes = CAPI.mdlperentitycollisionboxes

--- Enable elliptic collision for model (good for i.e. trees)
-- @param v 1 to enable, 0 to disable.
-- @class function
-- @name mdl.ellipsecollide
mdl.ellipsecollide = CAPI.mdlellipsecollide

--- Set scripting bounding box.
-- @param n Model name.
-- @class function
-- @name mdl.scriptbb
mdl.scriptbb = CAPI.scriptmdlbb

--- Set scripting collision box.
-- @param n Model name.
-- @class function
-- @name mdl.scriptcb
mdl.scriptcb = CAPI.scriptmdlcb

--- Return a Lua table with mesh info.
-- Contains "length" element which contains tris length
-- and data of each tri. Basically looks like this:<br/>
-- table -> {<br/>
--     length -> 3<br/>
--     0 -> { a -> A, b -> B, c -> C }<br/>
--     1 -> { a -> A, b -> B, c -> C }<br/>
--     2 -> { a -> A, b -> B, c -> C }<br/>
-- }<br/>
-- @param n Model name.
-- @return The table with mesh info.
-- @class function
-- @name mdl.mesh
mdl.mesh = CAPI.mdlmesh

--- This table contains all methods meant
-- for manipulating with obj model format.
-- @class table
-- @name obj
obj = _G["obj"]

--- Load a model.
-- @param mdl Model name.
-- @class function
-- @name obj.load

--- Set model skin.
-- @param n Name of the mesh.
-- @param t Name of the texture.
-- @param m Name of masks.
-- @param x Envmap max intensity.
-- @param i Envmap min intensity.
-- @class function
-- @name obj.skin

--- Set model bump map.
-- @param n Name of the mesh.
-- @parma b Name of the bump map texture.
-- @param s Name of the skin.
-- @class function
-- @name obj.bumpmap

--- Set model env map.
-- @param n Name of the mesh.
-- @param e Name of the env map.
-- @class function
-- @name obj.envmap

--- Set model specular intensity. See mdlspec.
-- @param n Mesh name.
-- @param s Specular intensity.
-- @see mdl.spec
-- @class function
-- @name obj.spec

--- Set model pitch. Controls how a model responds to its pitch.
-- Clamping is applied like this: clamp(pitch * s + o, m, n)
-- @param b Name of the bone which the pitch anim is applied to, as well as all bones in the sub-tree below it.
-- @param s Pitch in degrees is scaled by this.
-- @param o The pitch offset.
-- @param m Minimal pitch offset clamp.
-- @param n Maximal pitch offset clamp.
-- @class function
-- @name obj.pitch

--- Set model ambience. See mdlambient.
-- @param n Mesh name.
-- @param a Ambience.
-- @see mdl.ambient
-- @class function
-- @name obj.ambient

--- See mdlglow.
-- @param n Mesh name.
-- @param g Glow factor.
-- @param d Glow delta.
-- @param p Glow pulse.
-- @see mdl.glow
-- @class function
-- @name obj.glow

--- See mdlglare.
-- @param n Mesh name.
-- @param s Spec glare.
-- @param g Glow glare.
-- @see mdl.glare
-- @class function
-- @name obj.glare

--- See mdlalphatest.
-- @param n Mesh name.
-- @param c Cutoff.
-- @see mdl.alphatest
-- @class function
-- @name obj.alphatest

--- See mdlalphablend.
-- @param n Mesh name.
-- @param b Alpha blend switch.
-- @see mdl.alphablend
-- @class function
-- @name obj.alphablend

--- See mdlcullface.
-- @param n Mesh name.
-- @param c Back face culling switch.
-- @see mdl.cullface
-- @class function
-- @name obj.cullface

--- See mdlfullbright.
-- @param n Mesh name.
-- @param f Fullbright factor.
-- @see mdl.fullbright
-- @class function
-- @name obj.fullbright

--- See mdlshader.
-- @param n Mesh name.
-- @param s Shader name.
-- @see mdl.shader
-- @class function
-- @name obj.shader

--- Scroll a model skin at X and Y Hz along the X and Y axes of the skin.
-- @param n Mesh name.
-- @param X X axis scroll frequency.
-- @param Y Y axis scroll frequency.
-- @class function
-- @name obj.scroll

--- Toggle model noclip.
-- @param n Mesh name.
-- @param c 1 to make model noclip, 0 otherwise.
-- @class function
-- @name obj.noclip

--- This table contains all methods meant
-- for manipulating with md5 model format.
-- @class table
-- @name md5
md5 = _G["md5"]

--- Set model directory.
-- @param dir Directory.
-- @class function
-- @name md5.dir

--- Load a model. Skelname is optional name that can be assigned
-- to the skeleton specified in the md5mesh for skeleton sharing,
-- but need not be specified if you do not wish to share the skeleton.
-- This skeleton name must be specified for both the model supplying
-- a skeleton and ana attached model intending to use the skeleton.
-- @param mdl Model name.
-- @param skelname Skeleton name.
-- @class function
-- @name md5.load

--- Assign a tag name to bone.
-- @param n Bone name.
-- @param t Tag name.
-- @param tx Optional X translation.
-- @param ty Optional Y translation.
-- @param tz Optional Z translation.
-- @param rx Optional X rotation.
-- @param ry Optional Y rotation.
-- @param rz Optional Z rotation.
-- @class function
-- @name md5.tag

--- Set model pitch. Controls how a model responds to its pitch.
-- Clamping is applied like this: clamp(pitch * s + o, m, n)
-- @param mn Mesh name.
-- @param b Name of the bone which the pitch anim is applied to, as well as all bones in the sub-tree below it.
-- @param s Pitch in degrees is scaled by this.
-- @param o The pitch offset.
-- @param m Minimal pitch offset clamp.
-- @param n Maximal pitch offset clamp.
-- @class function
-- @name md5.pitch

--- Set pitch target.
-- @param mn Mesh name.
-- @param a Animation file.
-- @param f Frame offset. (integer)
-- @param m Minimal pitch. (float)
-- @param n Maximal pitch. (float)
-- @class function
-- @name md5.pitchtarget

--- Set pitch correct.
-- @param mn Mesh name.
-- @param t Target name.
-- @param s Pitch scale. (float)
-- @param m Minimal pitch. (float)
-- @param n Maximal pitch. (float)
-- @class function
-- @name md5.pitchcorrect

--- Set adjustment for the model.
-- @param n Model name.
-- @param yaw Yaw.
-- @param pitch Pitch.
-- @param roll Roll.
-- @param tx X translation of model center.
-- @param ty Y translation of model center.
-- @param tz Z translation of model center.
-- @class function
-- @name md5.adjust

--- Set model skin.
-- @param n Name of the mesh.
-- @param t Name of the texture.
-- @param m Name of masks.
-- @param x Envmap max intensity.
-- @param i Envmap min intensity.
-- @class function
-- @name md5.skin

--- Set model specular intensity. See mdlspec.
-- @param n Mesh name.
-- @param s Specular intensity.
-- @see mdl.spec
-- @class function
-- @name md5.spec

--- Set model ambience. See mdlambient.
-- @param n Mesh name.
-- @param a Ambience.
-- @see mdl.ambient
-- @class function
-- @name md5.ambient

--- See mdlglow.
-- @param n Mesh name.
-- @param g Glow factor.
-- @param d Glow delta.
-- @param p Glow pulse.
-- @see mdl.glow
-- @class function
-- @name md5.glow

--- See mdlglare.
-- @param n Mesh name.
-- @param s Spec glare.
-- @param g Glow glare.
-- @see mdl.glare
-- @class function
-- @name md5.glare

--- See mdlalphatest.
-- @param n Mesh name.
-- @param c Cutoff.
-- @see mdl.alphatest
-- @class function
-- @name md5.alphatest

--- See mdlalphablend.
-- @param n Mesh name.
-- @param b Alpha blend switch.
-- @see mdl.alphablend
-- @class function
-- @name md5.alphablend

--- See mdlcullface.
-- @param n Mesh name.
-- @param c Back face culling switch.
-- @see mdl.cullface
-- @class function
-- @name md5.cullface

--- Set model env map.
-- @param n Name of the mesh.
-- @param e Name of the env map.
-- @class function
-- @name md5.envmap

--- Set model bump map.
-- @param n Name of the mesh.
-- @parma b Name of the bump map texture.
-- @param s Name of the skin.
-- @class function
-- @name md5.bumpmap

--- See mdlfullbright.
-- @param n Mesh name.
-- @param f Fullbright factor.
-- @see mdl.fullbright
-- @class function
-- @name md5.fullbright

--- See mdlshader.
-- @param n Mesh name.
-- @param s Shader name.
-- @see mdl.shader
-- @class function
-- @name md5.shader

--- Scroll a model skin at X and Y Hz along the X and Y axes of the skin.
-- @param n Mesh name.
-- @param X X axis scroll frequency.
-- @param Y Y axis scroll frequency.
-- @class function
-- @name md5.scroll

--- Start a new animation part that will include a bone specified by
-- argument and all its sub-bones. This effectively splits animations up
-- at the bone specified by argument, such that each animation part
-- animates as it were a separate model. Note that a new animation part
-- has no animations (does not inherit any from previous animation part).
-- After a load, an implicit animation part is started that involves all bones
-- not used by other animation parts. Each model currently may only have two
-- animation parts, including the implicit animation part, so this command
-- may only be used once and only once per mesh loaded. However, you do not
-- need to specify any animation parts explicitly and acn just use default part
-- for all animations, if you do not wish the animations to be split up / blended
-- together.
-- @param b The bone name.
-- @class function
-- @name md5.animpart

--- This assigns a new animation to the current animation part of last loaded model.
-- First argument specifies the animation to define. Any of following names can be used:
-- dying, dead, pain, idle, forward, backward, left, right, hold 1 ... hold 7,
-- attack1 ... attack7, jump, sink, swim, edit, lag, taunt, win, lose, gun shoot,
-- gun idle, vwep shoot, vwep idle, mapmodel, trigger. Second argument specifies the
-- animation file. Third argument is optional and specifies frames per second for the
-- animation, defaulting to 10. Fourth argument is optional and specifies priority
-- for the animation, defaulting to 0. A character can have up to 2 animations
-- sumultaneously playing - a primary animation and a secondary animation.
-- If a character model defines the primary animation, it will be used, otherwise
-- secondary animation will be used if it's available. Primary animations are:
-- dying, dead, pain, hold 1 ... hold 7, attack 1 ... attack 7, edit, lag, taunt, win, lose.
-- Secondary animations are: idle, forward, backward, left, right, jump, sink, swim.
-- @param animname Animation name.
-- @param animfile Animation file.
-- @param animfps Animation frames per second.
-- @param animpri Animation priority.
-- @class function
-- @name md5.anim

--- This links two models together. Every model you load has an ID. The first model you load
-- has ID 0, the second has ID 1, and so on, those IDs are now used to identify the models
-- and link them together. First argument specifies ID of the parent, second the child ID.
-- Third argument specifies name of the tag that specifies at which vertex the models should
-- be linked. Rest of arguments are optional translation for this link.
-- @param p Parent ID.
-- @param c Child ID.
-- @param t Tag.
-- @param x X translation. (optional)
-- @param y Y translation. (optional)
-- @param z Z translation. (optional)
-- @class function
-- @name md5.link

--- Toggle model noclip.
-- @param n Mesh name.
-- @param c 1 to make model noclip, 0 otherwise.
-- @class function
-- @name md5.noclip

--- This table contains all methods meant
-- for manipulating with iqm model format.
-- @class table
-- @name iqm
iqm = _G["iqm"]

--- Set model directory.
-- @param dir Directory.
-- @class function
-- @name iqm.dir

--- Load a model. Skelname is optional name that can be assigned
-- to the skeleton specified in the iqmmesh for skeleton sharing,
-- but need not be specified if you do not wish to share the skeleton.
-- This skeleton name must be specified for both the model supplying
-- a skeleton and ana attached model intending to use the skeleton.
-- @param mdl Model name.
-- @param skelname Skeleton name.
-- @class function
-- @name iqm.load

--- Assign a tag name to bone.
-- @param n Bone name.
-- @param t Tag name.
-- @param tx Optional X translation.
-- @param ty Optional Y translation.
-- @param tz Optional Z translation.
-- @param rx Optional X rotation.
-- @param ry Optional Y rotation.
-- @param rz Optional Z rotation.
-- @class function
-- @name iqm.tag

--- Set model pitch. Controls how a model responds to its pitch.
-- Clamping is applied like this: clamp(pitch * s + o, m, n)
-- @param mn Mesh name.
-- @param b Name of the bone which the pitch anim is applied to, as well as all bones in the sub-tree below it.
-- @param s Pitch in degrees is scaled by this.
-- @param o The pitch offset.
-- @param m Minimal pitch offset clamp.
-- @param n Maximal pitch offset clamp.
-- @class function
-- @name iqm.pitch

--- Set pitch target.
-- @param mn Mesh name.
-- @param a Animation file.
-- @param f Frame offset. (integer)
-- @param m Minimal pitch. (float)
-- @param n Maximal pitch. (float)
-- @class function
-- @name iqm.pitchtarget

--- Set pitch correct.
-- @param mn Mesh name.
-- @param t Target name.
-- @param s Pitch scale. (float)
-- @param m Minimal pitch. (float)
-- @param n Maximal pitch. (float)
-- @class function
-- @name iqm.pitchcorrect

--- Set adjustment for the model.
-- @param n Model name.
-- @param yaw Yaw.
-- @param pitch Pitch.
-- @param roll Roll.
-- @param tx X translation of model center.
-- @param ty Y translation of model center.
-- @param tz Z translation of model center.
-- @class function
-- @name iqm.adjust

--- Set model skin.
-- @param n Name of the mesh.
-- @param t Name of the texture.
-- @param m Name of masks.
-- @param x Envmap max intensity.
-- @param i Envmap min intensity.
-- @class function
-- @name iqm.skin

--- Set model specular intensity. See mdlspec.
-- @param n Mesh name.
-- @param s Specular intensity.
-- @see mdl.spec
-- @class function
-- @name iqm.spec

--- Set model ambience. See mdlambient.
-- @param n Mesh name.
-- @param a Ambience.
-- @see mdl.ambient
-- @class function
-- @name iqm.ambient

--- See mdlglow.
-- @param n Mesh name.
-- @param g Glow factor.
-- @param d Glow delta.
-- @param p Glow pulse.
-- @see mdl.glow
-- @class function
-- @name iqm.glow

--- See mdlglare.
-- @param n Mesh name.
-- @param s Spec glare.
-- @param g Glow glare.
-- @see mdl.glare
-- @class function
-- @name iqm.glare

--- See mdlalphatest.
-- @param n Mesh name.
-- @param c Cutoff.
-- @see mdl.alphatest
-- @class function
-- @name iqm.alphatest

--- See mdlalphablend.
-- @param n Mesh name.
-- @param b Alpha blend switch.
-- @see mdl.alphablend
-- @class function
-- @name iqm.alphablend

--- See mdlcullface.
-- @param n Mesh name.
-- @param c Back face culling switch.
-- @see mdl.cullface
-- @class function
-- @name iqm.cullface

--- Set model env map.
-- @param n Name of the mesh.
-- @param e Name of the env map.
-- @class function
-- @name iqm.envmap

--- Set model bump map.
-- @param n Name of the mesh.
-- @parma b Name of the bump map texture.
-- @param s Name of the skin.
-- @class function
-- @name iqm.bumpmap

--- See mdlfullbright.
-- @param n Mesh name.
-- @param f Fullbright factor.
-- @see mdl.fullbright
-- @class function
-- @name iqm.fullbright

--- See mdlshader.
-- @param n Mesh name.
-- @param s Shader name.
-- @see mdl.shader
-- @class function
-- @name iqm.shader

--- Scroll a model skin at X and Y Hz along the X and Y axes of the skin.
-- @param n Mesh name.
-- @param X X axis scroll frequency.
-- @param Y Y axis scroll frequency.
-- @class function
-- @name iqm.scroll

--- Start a new animation part that will include a bone specified by
-- argument and all its sub-bones. This effectively splits animations up
-- at the bone specified by argument, such that each animation part
-- animates as it were a separate model. Note that a new animation part
-- has no animations (does not inherit any from previous animation part).
-- After a load, an implicit animation part is started that involves all bones
-- not used by other animation parts. Each model currently may only have two
-- animation parts, including the implicit animation part, so this command
-- may only be used once and only once per mesh loaded. However, you do not
-- need to specify any animation parts explicitly and acn just use default part
-- for all animations, if you do not wish the animations to be split up / blended
-- together.
-- @param b The bone name.
-- @class function
-- @name iqm.animpart

--- This assigns a new animation to the current animation part of last loaded model.
-- First argument specifies the animation to define. Any of following names can be used:
-- dying, dead, pain, idle, forward, backward, left, right, hold 1 ... hold 7,
-- attack1 ... attack7, jump, sink, swim, edit, lag, taunt, win, lose, gun shoot,
-- gun idle, vwep shoot, vwep idle, mapmodel, trigger. Second argument specifies the
-- animation file. Third argument is optional and specifies frames per second for the
-- animation, defaulting to 10. Fourth argument is optional and specifies priority
-- for the animation, defaulting to 0. A character can have up to 2 animations
-- sumultaneously playing - a primary animation and a secondary animation.
-- If a character model defines the primary animation, it will be used, otherwise
-- secondary animation will be used if it's available. Primary animations are:
-- dying, dead, pain, hold 1 ... hold 7, attack 1 ... attack 7, edit, lag, taunt, win, lose.
-- Secondary animations are: idle, forward, backward, left, right, jump, sink, swim.
-- @param animname Animation name.
-- @param animfile Animation file.
-- @param animfps Animation frames per second.
-- @param animpri Animation priority.
-- @class function
-- @name iqm.anim

--- This links two models together. Every model you load has an ID. The first model you load
-- has ID 0, the second has ID 1, and so on, those IDs are now used to identify the models
-- and link them together. First argument specifies ID of the parent, second the child ID.
-- Third argument specifies name of the tag that specifies at which vertex the models should
-- be linked. Rest of arguments are optional translation for this link.
-- @param p Parent ID.
-- @param c Child ID.
-- @param t Tag.
-- @param x X translation. (optional)
-- @param y Y translation. (optional)
-- @param z Z translation. (optional)
-- @class function
-- @name iqm.link

--- Toggle model noclip.
-- @param n Mesh name.
-- @param c 1 to make model noclip, 0 otherwise.
-- @class function
-- @name iqm.noclip

--- This table contains all methods meant
-- for manipulating with smd model format.
-- @class table
-- @name smd
smd = _G["smd"]

--- Set model directory.
-- @param dir Directory.
-- @class function
-- @name smd.dir

--- Load a model. Skelname is optional name that can be assigned
-- to the skeleton specified in the smdmesh for skeleton sharing,
-- but need not be specified if you do not wish to share the skeleton.
-- This skeleton name must be specified for both the model supplying
-- a skeleton and ana attached model intending to use the skeleton.
-- @param mdl Model name.
-- @param skelname Skeleton name.
-- @class function
-- @name smd.load

--- Assign a tag name to bone.
-- @param n Bone name.
-- @param t Tag name.
-- @param tx Optional X translation.
-- @param ty Optional Y translation.
-- @param tz Optional Z translation.
-- @param rx Optional X rotation.
-- @param ry Optional Y rotation.
-- @param rz Optional Z rotation.
-- @class function
-- @name smd.tag

--- Set model pitch. Controls how a model responds to its pitch.
-- Clamping is applied like this: clamp(pitch * s + o, m, n)
-- @param mn Mesh name.
-- @param b Name of the bone which the pitch anim is applied to, as well as all bones in the sub-tree below it.
-- @param s Pitch in degrees is scaled by this.
-- @param o The pitch offset.
-- @param m Minimal pitch offset clamp.
-- @param n Maximal pitch offset clamp.
-- @class function
-- @name smd.pitch

--- Set pitch target.
-- @param mn Mesh name.
-- @param a Animation file.
-- @param f Frame offset. (integer)
-- @param m Minimal pitch. (float)
-- @param n Maximal pitch. (float)
-- @class function
-- @name smd.pitchtarget

--- Set pitch correct.
-- @param mn Mesh name.
-- @param t Target name.
-- @param s Pitch scale. (float)
-- @param m Minimal pitch. (float)
-- @param n Maximal pitch. (float)
-- @class function
-- @name smd.pitchcorrect

--- Set adjustment for the model.
-- @param n Model name.
-- @param yaw Yaw.
-- @param pitch Pitch.
-- @param roll Roll.
-- @param tx X translation of model center.
-- @param ty Y translation of model center.
-- @param tz Z translation of model center.
-- @class function
-- @name smd.adjust

--- Set model skin.
-- @param n Name of the mesh.
-- @param t Name of the texture.
-- @param m Name of masks.
-- @param x Envmap max intensity.
-- @param i Envmap min intensity.
-- @class function
-- @name smd.skin

--- Set model specular intensity. See mdlspec.
-- @param n Mesh name.
-- @param s Specular intensity.
-- @see mdl.spec
-- @class function
-- @name smd.spec

--- Set model ambience. See mdlambient.
-- @param n Mesh name.
-- @param a Ambience.
-- @see mdl.ambient
-- @class function
-- @name smd.ambient

--- See mdlglow.
-- @param n Mesh name.
-- @param g Glow factor.
-- @param d Glow delta.
-- @param p Glow pulse.
-- @see mdl.glow
-- @class function
-- @name smd.glow

--- See mdlglare.
-- @param n Mesh name.
-- @param s Spec glare.
-- @param g Glow glare.
-- @see mdl.glare
-- @class function
-- @name smd.glare

--- See mdlalphatest.
-- @param n Mesh name.
-- @param c Cutoff.
-- @see mdl.alphatest
-- @class function
-- @name smd.alphatest

--- See mdlalphablend.
-- @param n Mesh name.
-- @param b Alpha blend switch.
-- @see mdl.alphablend
-- @class function
-- @name smd.alphablend

--- See mdlcullface.
-- @param n Mesh name.
-- @param c Back face culling switch.
-- @see mdl.cullface
-- @class function
-- @name smd.cullface

--- Set model env map.
-- @param n Name of the mesh.
-- @param e Name of the env map.
-- @class function
-- @name smd.envmap

--- Set model bump map.
-- @param n Name of the mesh.
-- @parma b Name of the bump map texture.
-- @param s Name of the skin.
-- @class function
-- @name smd.bumpmap

--- See mdlfullbright.
-- @param n Mesh name.
-- @param f Fullbright factor.
-- @see mdl.fullbright
-- @class function
-- @name smd.fullbright

--- See mdlshader.
-- @param n Mesh name.
-- @param s Shader name.
-- @see mdl.shader
-- @class function
-- @name smd.shader

--- Scroll a model skin at X and Y Hz along the X and Y axes of the skin.
-- @param n Mesh name.
-- @param X X axis scroll frequency.
-- @param Y Y axis scroll frequency.
-- @class function
-- @name smd.scroll

--- Start a new animation part that will include a bone specified by
-- argument and all its sub-bones. This effectively splits animations up
-- at the bone specified by argument, such that each animation part
-- animates as it were a separate model. Note that a new animation part
-- has no animations (does not inherit any from previous animation part).
-- After a load, an implicit animation part is started that involves all bones
-- not used by other animation parts. Each model currently may only have two
-- animation parts, including the implicit animation part, so this command
-- may only be used once and only once per mesh loaded. However, you do not
-- need to specify any animation parts explicitly and acn just use default part
-- for all animations, if you do not wish the animations to be split up / blended
-- together.
-- @param b The bone name.
-- @class function
-- @name smd.animpart

--- This assigns a new animation to the current animation part of last loaded model.
-- First argument specifies the animation to define. Any of following names can be used:
-- dying, dead, pain, idle, forward, backward, left, right, hold 1 ... hold 7,
-- attack1 ... attack7, jump, sink, swim, edit, lag, taunt, win, lose, gun shoot,
-- gun idle, vwep shoot, vwep idle, mapmodel, trigger. Second argument specifies the
-- animation file. Third argument is optional and specifies frames per second for the
-- animation, defaulting to 10. Fourth argument is optional and specifies priority
-- for the animation, defaulting to 0. A character can have up to 2 animations
-- sumultaneously playing - a primary animation and a secondary animation.
-- If a character model defines the primary animation, it will be used, otherwise
-- secondary animation will be used if it's available. Primary animations are:
-- dying, dead, pain, hold 1 ... hold 7, attack 1 ... attack 7, edit, lag, taunt, win, lose.
-- Secondary animations are: idle, forward, backward, left, right, jump, sink, swim.
-- @param animname Animation name.
-- @param animfile Animation file.
-- @param animfps Animation frames per second.
-- @param animpri Animation priority.
-- @class function
-- @name smd.anim

--- This links two models together. Every model you load has an ID. The first model you load
-- has ID 0, the second has ID 1, and so on, those IDs are now used to identify the models
-- and link them together. First argument specifies ID of the parent, second the child ID.
-- Third argument specifies name of the tag that specifies at which vertex the models should
-- be linked. Rest of arguments are optional translation for this link.
-- @param p Parent ID.
-- @param c Child ID.
-- @param t Tag.
-- @param x X translation. (optional)
-- @param y Y translation. (optional)
-- @param z Z translation. (optional)
-- @class function
-- @name smd.link

--- Toggle model noclip.
-- @param n Mesh name.
-- @param c 1 to make model noclip, 0 otherwise.
-- @class function
-- @name smd.noclip

--- This table contains
-- ragdoll manipulation methods.
-- @class table
-- @name rd
rd = {}

--- Specify a ragdoll vert.
-- @param x X coord.
-- @param y Y coord.
-- @param z Z coord.
-- @param r Radius.
-- @class function
-- @name rd.name
rd.vert = CAPI.rdvert

--- Specify rd eye.
-- @param v Ragdoll eye (integer)
-- @class function
-- @name rd.name
rd.eye = CAPI.rdeye

--- Specify a ragdoll tri.
-- @param v1 V1
-- @param v2 V2
-- @param v3 V3
-- @class function
-- @name rd.name
rd.tri = CAPI.rdtri

--- Specify a ragdoll joint.
-- @param n N
-- @param t T
-- @param v1 V1
-- @param v2 V2
-- @param v3 V3
-- @class function
-- @name rd.name
rd.joint = CAPI.rdjoint

--- Set ragdoll distance limit.
-- @param v1 V1
-- @param v2 V2
-- @param mindist Minimal distance.
-- @param maxdist Maximal distance.
-- @class function
-- @name rd.name
rd.limitdist = CAPI.rdlimitdist

--- Limit rotation in ragdoll.
-- @param t1 T1
-- @param t2 T2
-- @param m Maximal angle.
-- @param qx qx
-- @param qy qy
-- @param qz qz
-- @param qw qw
-- @class function
-- @name rd.name
rd.limitrot = CAPI.rdlimitrot

--- Turn on/off ragdoll joint animation.
-- @param v 1 or 0.
-- @class function
-- @name rd.name
rd.animjoints = CAPI.rdanimjoints
