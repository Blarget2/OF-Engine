
//=============================================================================
// Copyright (C) 2008 Alon Zakai ('Kripken') kripkensteiner@gmail.com
//
// This file is part of the Intensity Engine project,
//    http://www.intensityengine.com
//
// The Intensity Engine is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, version 3.
//
// The Intensity Engine is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with the Intensity Engine.  If not, see
//     http://www.gnu.org/licenses/
//     http://www.gnu.org/licenses/agpl-3.0.html
//=============================================================================


//
// Message template file. Actual C++ code is procedurally generated from this file.
// The file format is intuitive, but *extremely* strict! Do not diverge!
// Indentation is used to infer structure. Follow the examples carefully
//
// implicit clientNumber: a parameter, that is given to the message passer but is part of the message 'header',
// and not in the format string. See examples for how this is used.
//
// Also implicit is 'sender', the server has this set to the # of the client sending the message.
// Another implicit is 'receiver', this is the receiving client #. On the Client, we only have the Player,
// but on the server we have multiple NPCs, each with its own client #. In the future we may also allow multiple
// NPCs on the client, or multiple servers, etc. Note: When the server receives a message, receiver is '-1'.
//
// 'npc' is a bool that is set to true for npc events. Only relevant for server->client,npc (server->client is
// of course not sent to npcs).
//
// client->server       - obvious
// server->client       - obvious. Not sent to NPCs
// server->client,npc   - Send to NPCs as well
// server->client,dummy - Sent to the server's singleton dummy fpsclient. This lets the server's internal fpsclient be updated.
//

// A direct message from server to a single client
PersonalServerMessage(server->client)
    implicit clientNumber
    char* title
    char* content
    receive:
        engine.getg("gui")
              .t_getraw("message")
              .push(title)
              .push(content)
              .call(2, 0).pop(1);
end

// A request for the server to send a message to all other clients
RequestServerMessageToAll(client->server)
    char* message
    receive:
        send_PersonalServerMessage(-1, "Message from Client", message);
end

// TODO: If LoginRequest is not called soon enough, disconnect enet clients in that state
LoginRequest(client->server)
    receive:
        #ifdef SERVER
            if (!world::get_scenario_code())
            {
                send_PersonalServerMessage(
                    sender,
                    "Login failure",
                    "Login failure: instance is not running a map"
                );
                force_network_flush();
                disconnect_client(sender, 3); // DISC_KICK .. most relevant for now
            }
            server::setAdmin(sender, true);
            send_LoginResponse(sender, true, true);
        #else // CLIENT, during a localconnect
            ClientSystem::uniqueId = 9999; // Dummy safe uniqueId value for localconnects. Just set it here, brute force

            // Notify client of results of login
            send_LoginResponse(sender, true, true);
        #endif
end

// A notification sent from the server during the login process. This is sent *before* the player's logic entity
// is activated, which would send out a notification to the player. The player needs to know their uniqueId before
// that, which this message does.
YourUniqueId(server->client)
    implicit clientNumber
    int uniqueId // the unique ID for the client (in the currently-running module) // TODO: A message for 'switchmodule', w/new uniqueID
    send:
        // Remember this client's unique ID. Done here so always in sync with the client's belief about its uniqueId.
        server::getUniqueId(clientNumber) = uniqueId;
    receive:
        logger::log(logger::DEBUG, "Told my unique ID: %d\r\n", uniqueId);

        ClientSystem::uniqueId = uniqueId;
end

//
LoginResponse(server->client)
    implicit clientNumber
    bool success
    bool local
    send:
        // If logged in OK, this is the time to create a lua logic entity for the client. Also adds to internal FPSClient
        if (success)
            server::createluaEntity(clientNumber);
    receive:
        if (success)
        {
            ClientSystem::finishLogin(local); // This player will be known as 'uniqueID' in the current module
            conoutf("Login was successful.\r\n");
            send_RequestCurrentScenario();
        } else {
            conoutf("Login failure. Please check your username and password.\r\n");
            disconnect();
        }
end

// Tells the client that the server is starting to run a new scenario. The client should
// (1) stop sending position updates, (2) show a message to the client, and (3) probably stop rendering, or reduce
// rendering to a limited capacity
PrepareForNewScenario(server->client)
    implicit clientNumber
    char* scenarioCode
    receive:
        engine.getg("gui")
              .t_getraw("message")
              .push("Server")
              .push("Map being prepared on the server, please wait ..")
              .call(2, 0).pop(1);
        ClientSystem::prepareForNewScenario(scenarioCode);
end

//
RequestCurrentScenario(client->server)
    receive:
        if (!world::get_scenario_code()) return;
        world::send_curr_map(sender);
end

// Tells the client that the scenario has changed, and the client should acquire the current map, using the name
// that we give them. The map is acquired using the asset system.
// This message is used both for changing the map, and for notifying about an update to the map,
// and hence it flushes the assetID cache. TODO: Make this fine-grained
// TODO: Need activity ID?
NotifyAboutCurrentScenario(server->client)
    implicit clientNumber
    char* mid
    char* sc
    receive:
        ClientSystem::currScenarioCode = sc;
        world::set_map(mid);
end

// Tells the server that it should restart, e.g., if this client has updated the map, by uploading a new version
// to the asset server. Server clears its cache (so it will get the new version), and
// re-starts the map
RestartMap(client->server)
    receive:
        if (!world::get_scenario_code()) return;

        if (!server::isAdmin(sender))
        {
            logger::log(logger::WARNING, "Non-admin tried to restart the map\r\n");
            send_PersonalServerMessage(sender, "Server", "You are not an administrator, and cannot restart the map");
            return;
        }
        world::restart_map();
end

// A new Entity is asked to be created by a client
NewEntityRequest(client->server)
    char* _class
    float x
    float y
    float z
    char* stateData
    send:
        EditingSystem::madeChanges = true;
    receive:
        if (!world::get_scenario_code()) return;

        if (!server::isAdmin(sender))
        {
            logger::log(logger::WARNING, "Non-admin tried to add an entity\r\n");
            send_PersonalServerMessage(sender, "Server", "You are not an administrator, and cannot create entities");
            return;
        }

        // Validate class

        lua::engine.getg("entity_classes").t_getraw("get_class").push(_class).call(1, 1);
        if (lua::engine.is<void>(-1))
        {
            lua::engine.pop(2);
            return;
        }
        lua::engine.pop(2);

        // Add entity

        logger::log(logger::DEBUG, "Creating new entity, %s   %f,%f,%f   %s\r\n", _class, x, y, z, stateData);

        if ( !server::isRunningCurrentScenario(sender) ) return; // Silently ignore info from previous scenario

        engine.getg("entity_classes").t_getraw("get_sauer_type").push(_class).call(1, 1);
        const char *sauerType = engine.get(-1, "extent");
        engine.pop(2);

        logger::log(logger::DEBUG, "Sauer type: %s\r\n", sauerType);

        // Create

        engine.getg("entity_store").t_getraw("new").push(_class);
        engine.t_new();
        engine.push("position")
            .t_new()
            .t_set("x", x)
            .t_set("y", y)
            .t_set("z", z);
        engine.t_set().t_set("state_data", stateData);
        engine.call(2, 1);
        int newUniqueId = engine.t_get<int>("uid");
        engine.pop(2);

        logger::log(logger::DEBUG, "Created Entity: %d - %s  (%f,%f,%f) \r\n",
                                      newUniqueId, _class, x, y, z);

end

// Server sending a state data change to client(s) (typically all of them). Blindly obeyed.
StateDataUpdate(server->client,npc)
    implicit clientNumber
    int uniqueId
    int keyProtocolId
    char* value
    int originalClientNumber
    send:
        exclude = originalClientNumber;
    receive:
        #ifdef SERVER
            #define STATE_DATA_UPDATE \
                uniqueId = uniqueId;  /* Prevent warnings */ \
                keyProtocolId = keyProtocolId; \
                originalClientNumber = originalClientNumber; \
                return; /* We do send this to the NPCs sometimes, as it is sent during their creation (before they are fully */ \
                        /* registered even). But we have no need to process it on the server. */
        #else
            #define STATE_DATA_UPDATE \
                assert(originalClientNumber == -1 || ClientSystem::playerNumber != originalClientNumber); /* Can be -1, or else cannot be us */ \
                \
                logger::log(logger::DEBUG, "StateDataUpdate: %d, %d, %s \r\n", uniqueId, keyProtocolId, value); \
                \
                if (!engine.hashandle()) \
                    return; \
                \
                engine.getg("entity_store").t_getraw("set_state_data").push(uniqueId).push(keyProtocolId).push(value).call(3, 0).pop(1);
        #endif

        STATE_DATA_UPDATE
end

// Client *requests* to change a state data. Server decides what to actually do (perhaps the door can't be opened, or has
// already been opened while the message was being transferred, etc.)
// FIXME XXX: SECURITY: need to validate 'key' and 'value' values before being run on the server like we do here.
StateDataChangeRequest(client->server)
    int uniqueId
    int keyProtocolId
    char* value
    send:
        // This isn't a perfect way to differentiate transient state data changes from permanent ones
        // that justify saying 'changes were made', but for now it will do. Note that even checking
        // for changes to persistent entities is not enough - transient changes on them are generally
        // not expected to count as 'changes'. So this check, of editmode, is the best simple solution
        // there is - if you're in edit mode, the change counts as a 'real change', that you probably
        // want saved.
        // Note: We don't do this with unreliable messages, meaningless anyhow.
        if (editmode)
            EditingSystem::madeChanges = true;
    receive:
        if (!world::get_scenario_code()) return;

        #define STATE_DATA_REQUEST \
        int actorUniqueId = server::getUniqueId(sender); \
        \
        logger::log(logger::DEBUG, "client %d requests to change %d to value: %s\r\n", actorUniqueId, keyProtocolId, value); \
        \
        if ( !server::isRunningCurrentScenario(sender) ) return; /* Silently ignore info from previous scenario */ \
        \
        engine.getg("entity_store").t_getraw("set_state_data").push(uniqueId).push(keyProtocolId).push(value).push(actorUniqueId).call(4, 0).pop(1);

        STATE_DATA_REQUEST
end

UnreliableStateDataUpdate(server->client,npc)
    unreliable
    implicit clientNumber
    int uniqueId
    int keyProtocolId
    char* value
    int originalClientNumber
    send:
        exclude = originalClientNumber;
    receive:
        STATE_DATA_UPDATE
end

UnreliableStateDataChangeRequest(client->server)
    unreliable
    int uniqueId
    int keyProtocolId
    char* value
    receive:
        if (!world::get_scenario_code()) return;

        STATE_DATA_REQUEST
end

NotifyNumEntities(server->client)
    implicit clientNumber
    int num
    receive:
        world::set_num_expected_entities(num);
end

// Sent by the server right after all active entities. This signals that no further entities are going to be sent,
// and that therefore the client has all the data needed to finish loading the map and starting the scenario.
AllActiveEntitiesSent(server->client)
    implicit clientNumber
    receive:
        ClientSystem::finishLoadWorld();
end

// Loading a map is complete, asking for data on all entities, both in-map and non  (NPCs, non-Sauers, etc.)
ActiveEntitiesRequest(client->server)
    char* scenarioCode // The scenario the client is running, i.e., for which it wants the entities
    receive:
        #ifdef SERVER
            if (!world::get_scenario_code()) return;

            // Mark the client as running the current scenario, if indeed doing so
            server::setClientScenario(sender, scenarioCode);
            if ( !server::isRunningCurrentScenario(sender) )
            {
                logger::log(logger::WARNING, "Client %d requested active entities for an invalid scenario: %s\r\n",
                    sender, scenarioCode
                );
                send_PersonalServerMessage(sender, "Invalid scenario", "An error occured in synchronizing scenarios");
                return;
            }
            engine.getg("entity_store")
                  .t_getraw("send_entities")
                  .push(sender)
                  .call(1, 0)
                  .pop(1);
            MessageSystem::send_AllActiveEntitiesSent(sender);
            engine.getg("on_player_login");
            if (engine.is<void*>(-1)) engine.getg("entity_store")
                      .t_getraw("get")
                      .push(server::getUniqueId(sender))
                      .call(1, 1)
                      .shift().pop(1)
                      .call(1, 0);
            else engine.pop(1);

        #else // CLIENT
            // Send just enough info for the player's LE
            send_LogicEntityCompleteNotification( sender,
                                                  sender,
                                                  9999, // TODO: this same constant appears in multiple places
                                                  "player",
                                                  "{}" );

            MessageSystem::send_AllActiveEntitiesSent(sender);

        #endif
end

// Information about a logic entity. Arrives with full state data. For map entities, the entity already exists,
// and this just updates the state data completely
LogicEntityCompleteNotification(server->client,npc)
    implicit clientNumber
    int otherClientNumber
    int otherUniqueId
    char* otherClass
    char* stateData
    receive:
        #ifdef SERVER
            return; // We do send this to the NPCs sometimes, as it is sent during their creation (before they are fully
                    // registered even). But we have no need to process it on the server.
        #endif
        if (!engine.hashandle())
            return;

        logger::log(logger::DEBUG, "RECEIVING LE: %d,%d,%s\r\n", otherClientNumber, otherUniqueId, otherClass);
        INDENT_LOG(logger::DEBUG);

        // If a logic entity does not yet exist, create one
        CLogicEntity *entity = LogicSystem::getLogicEntity(otherUniqueId);
        if (entity == NULL)
        {
            logger::log(logger::DEBUG, "Creating new active LogicEntity\r\n");

            engine.getg("entity_store").t_getraw("add")
                .push(otherClass)
                .push(otherUniqueId)
                .t_new();
            if (otherClientNumber >= 0) // If this is another client, NPC, etc., then send the clientnumber, critical for setup
            {
                #ifdef CLIENT
                    // If this is the player, validate it is the clientNumber we already have
                    if (otherUniqueId == ClientSystem::uniqueId)
                    {
                        logger::log(logger::DEBUG, "This is the player's entity (%d), validating client num: %d,%d\r\n",
                            otherUniqueId, otherClientNumber, ClientSystem::playerNumber);

                        assert(otherClientNumber == ClientSystem::playerNumber);
                    }
                #endif
                engine.t_set("cn", otherClientNumber);
            }
            engine.call(3, 0).pop(1);

            entity = LogicSystem::getLogicEntity(otherUniqueId);

            if (!entity)
            {
                logger::log(logger::ERROR, "Received a LogicEntityCompleteNotification for a LogicEntity that cannot be created: %d - %s. Ignoring\r\n", otherUniqueId, otherClass);
                return;
            }
        } else
            logger::log(logger::DEBUG, "Existing LogicEntity %d,%d,%d, no need to create\r\n", entity != NULL, entity->getUniqueId(),
                                            otherUniqueId);

        // A logic entity now exists (either one did before, or we created one), we now update the stateData, if we
        // are remotely connected (TODO: make this not segfault for localconnect)
        logger::log(logger::DEBUG, "Updating stateData with: %s\r\n", stateData);

        engine.getref(entity->luaRef)
            .t_getraw("update_complete_state_data")
            .push_index(-2)
            .push(stateData)
            .call(2, 0)
            .pop(1);

        #ifdef CLIENT
            // If this new entity is in fact the Player's entity, then we finally have the player's LE, and can link to it.
            if (otherUniqueId == ClientSystem::uniqueId)
            {
                logger::log(logger::DEBUG, "Linking player information, uid: %d\r\n", otherUniqueId);

                // Note in C++
                ClientSystem::playerLogicEntity = LogicSystem::getLogicEntity(ClientSystem::uniqueId);

                // Note in lua
                engine.getg("entity_store").t_getraw("set_player_uid").push(ClientSystem::uniqueId).call(1, 0).pop(1);
            }
        #endif

        // Events post-reception
        world::trigger_received_entity();
end

RequestLogicEntityRemoval(client->server)
    int uniqueId
    send:
        EditingSystem::madeChanges = true;
    receive:
        if (!world::get_scenario_code()) return;

        if (!server::isAdmin(sender))
        {
            logger::log(logger::WARNING, "Non-admin tried to remove an entity\r\n");
            send_PersonalServerMessage(sender, "Server", "You are not an administrator, and cannot remove entities");
            return;
        }

        if ( !server::isRunningCurrentScenario(sender) ) return; // Silently ignore info from previous scenario

        engine.getg("entity_store").t_getraw("del").push(uniqueId).call(1, 0).pop(1);
end

// Notifies to remove a LogicEntity
LogicEntityRemoval(server->client)
    implicit clientNumber
    int uniqueId
    receive:
        if (!engine.hashandle())
            return;
        engine.getg("entity_store").t_getraw("del").push(uniqueId).call(1, 0).pop(1);
end

ExtentCompleteNotification(server->client)
    implicit clientNumber
    int otherUniqueId
    char* otherClass
    char* stateData
    float x
    float y
    float z
    int attr1
    int attr2
    int attr3
    int attr4
    receive:
        if (!engine.hashandle())
            return;

        logger::log(logger::DEBUG, "RECEIVING Extent: %d,%s - %f,%f,%f  %d,%d,%d\r\n", otherUniqueId, otherClass,
            x, y, z, attr1, attr2, attr3, attr4);

        INDENT_LOG(logger::DEBUG);

        // If a logic entity does not yet exist, create one
        CLogicEntity *entity = LogicSystem::getLogicEntity(otherUniqueId);
        if (entity == NULL)
        {
            logger::log(logger::DEBUG, "Creating new active LogicEntity\r\n");

            engine.getg("entity_classes").t_getraw("get_sauer_type").push(otherClass).call(1, 1);
            const char *sauerType = engine.get(-1, "extent");
            engine.pop(2);

            engine.getg("entity_store").t_getraw("add")
                .push(otherClass)
                .push(otherUniqueId)
                .t_new()
                    .t_set("_type", findtype((char*)sauerType))
                    .t_set("x", x)
                    .t_set("y", y)
                    .t_set("z", z)
                    .t_set("attr1", attr1)
                    .t_set("attr2", attr2)
                    .t_set("attr3", attr3)
                    .t_set("attr4", attr4)
                .call(3, 0).pop(1);

            entity = LogicSystem::getLogicEntity(otherUniqueId);
            assert(entity != NULL);
        } else
            logger::log(logger::DEBUG, "Existing LogicEntity %d,%d,%d, no need to create\r\n", entity != NULL, entity->getUniqueId(),
                                            otherUniqueId);

        // A logic entity now exists (either one did before, or we created one), we now update the stateData, if we
        // are remotely connected (TODO: make this not segfault for localconnect)
        logger::log(logger::DEBUG, "Updating stateData\r\n");

        engine.getref(entity->luaRef)
            .t_getraw("update_complete_state_data")
            .push_index(-2)
            .push(stateData)
            .call(2, 0)
            .pop(1);

        // Events post-reception
        world::trigger_received_entity();
end

// Client number is sent also explicitly here, so the client finds it out
InitS2C(server->client)
    implicit clientNumber
    int explicitClientNumber
    int protocolVersion
    receive:
        if (!is_npc)
        {
            logger::log(logger::DEBUG, "client.h: N_INITS2C gave us cn/protocol: %d/%d\r\n", explicitClientNumber, protocolVersion);

            if(protocolVersion != PROTOCOL_VERSION)
            {
                conoutf(CON_ERROR, "You are using a different network protocol (you: %d, server: %d)", PROTOCOL_VERSION, protocolVersion);
                disconnect();
                return;
            }

            #ifdef CLIENT
                fpsent *player1 = game::player1;
            #else
                assert(0);
                fpsent *player1 = NULL;
            #endif

            player1->clientnum = explicitClientNumber; // we are now fully connected
                                                       // Kripken: Well, sauer would be, we still need more...
            #ifdef CLIENT
            ClientSystem::login(explicitClientNumber); // Finish the login process, send server our user/pass. NPCs need not do this.
            #endif
        } else {
            // NPC
            logger::log(logger::INFO, "client.h (npc): N_INITS2C gave us cn/protocol: %d/%d\r\n", explicitClientNumber, protocolVersion);
            assert(0); //does this ever occur?
        }
end

// Client notifies server of a sound
SoundToServer(client->server)
    unreliable
    int soundId
    receive:
        if (!world::get_scenario_code()) return;

        if ( !server::isRunningCurrentScenario(sender) ) return; // Silently ignore info from previous scenario

        dynent* otherEntity = game::getclient(sender);
        if (otherEntity)
//            send_SoundToClients(-1, otherEntity->o.x, otherEntity->o.y, otherEntity->o.z, soundId, sender); TODO
            send_SoundToClients(-1, soundId, sender);
end

// Server notifies clients of a sound
SoundToClients(server->client)
    unreliable
    implicit clientNumber
//    float x
//    float y
//    float z TODO
    int soundId
    int originalClientNumber
    send:
        exclude = originalClientNumber; // This is how to ensure we do not send back to the client who originally sent it
    receive:
        assert(ClientSystem::playerNumber != originalClientNumber);

//        vec pos(x,y,z);
//        playsound(soundId, &pos);

        dynent* player = game::getclient(originalClientNumber);
        if (!player)
        {
            if (originalClientNumber == -1) // Do not play sounds from nonexisting clients - would be odd
                playsound(soundId);
        }
        else
        {
            CLogicEntity *entity = LogicSystem::getLogicEntity( player );
            if (entity)
            {
                vec where = entity->getOrigin();
                playsound(soundId, &where);
            } // If no entity - but there should be, there is a player - do not play at all.
        }
end

// Server notifies clients of changed volume / sound on mapsound entity
MapSoundToClients(server->client)
    unreliable
    implicit clientNumber
    char* soundName
    int entityUniqueId
    receive:
        CLogicEntity *entity = LogicSystem::getLogicEntity(entityUniqueId);
        if (entity)
        {
            extentity *e = entity->staticEntity;
            stopmapsound(e);
            if(camera1->o.dist(e->o) < e->attr2)
            {
                if(!e->visible) playmapsound(soundName, e, e->attr4, -1);
                else if(e->visible) stopmapsound(e);
            }
        }
end

// Server notifies clients of a sound
SoundToClientsByName(server->client)
    unreliable
    implicit clientNumber
    float x
    float y
    float z
    char* soundName
    int originalClientNumber
    send:
        exclude = originalClientNumber; // This is how to ensure we do not send back to the client who originally sent it
    receive:
        assert(ClientSystem::playerNumber != originalClientNumber);

        vec pos(x,y,z);
        if (pos.x || pos.y || pos.z)
            playsoundname(soundName, &pos);
        else
            playsoundname(soundName);
end

// Server notifies clients of that sound stops
SoundStopToClientsByName(server->client)
    unreliable
    implicit clientNumber
    int volume
    char* soundName
    int originalClientNumber
    send:
        exclude = originalClientNumber; // This is how to ensure we do not send back to the client who originally sent it
    receive:
        assert(ClientSystem::playerNumber != originalClientNumber);
        stopsoundbyid(getsoundid(soundName, volume));
end

// Ask server to switch edit mode status
EditModeC2S(client->server)
    int mode
    receive:
        if (!world::get_scenario_code() || !server::isRunningCurrentScenario(sender) ) return;
        send_EditModeS2C(-1, sender, mode); // Relay
end

// Update client on another client's edit mode.
EditModeS2C(server->client,dummy)
    implicit clientNumber
    int otherClientNumber
    int mode
    send:
        exclude = otherClientNumber;
    receive:
        dynent* d = game::getclient(otherClientNumber);

        // Code from sauer's client.h
        if (d)
        {
            if (mode) 
            {
                d->editstate = d->state;
                d->state     = CS_EDITING;
            }
            else 
            {
                d->state = d->editstate;
            }
        }
end

// Request the current map file. Like /getmap in Sauer
RequestMap(client->server)
    receive:
        if (!world::get_scenario_code()) return;
        world::send_curr_map(sender);
end

// Tells the server that a LogicEntity has been clicked
DoClick(client->server)
    int button
    int down
    float x
    float y
    float z
    int uniqueId
    receive:
        if (!world::get_scenario_code()) return;

        if ( !server::isRunningCurrentScenario(sender) ) return; // Silently ignore info from previous scenario

        engine.getg("click");
        if (!engine.is<void*>(-1))
        {
            engine.pop(1);
            if (uniqueId != -1)
            {
                CLogicEntity *entity = LogicSystem::getLogicEntity(uniqueId);
                if (entity)
                {
                    engine.getref(entity->luaRef).t_getraw("click");
                    if (!engine.is<void*>(-1))
                    {
                        engine.pop(1);
                        return;
                    }
                    else engine.push_index(-2).push(button).push(down).push(vec(x, y, z)).call(4, 0);
                }
                else return; /* No need to call a click on entity that vanished meanwhile or does not yet exist! */
            }
        }
        else
        {
            engine.push(button).push(down).push(vec(x, y, z));
            int numargs = 3;
            if (uniqueId != -1)
            {
                CLogicEntity *entity = LogicSystem::getLogicEntity(uniqueId);
                if (entity)
                {
                    engine.getref(entity->luaRef);
                    numargs++;
                }
                else
                {
                    engine.pop(4);
                    return;
                }
            }
            engine.call(numargs, 0);
        }
end

// Server notifies clients of a particle effect
ParticleSplashToClients(server->client)
    unreliable
    implicit clientNumber
    int _type
    int num
    int fade
    float x
    float y
    float z
    receive:
        vec pos(x,y,z);
        particle_splash(_type, num, fade, pos);
end

ParticleSplashRegularToClients(server->client)
    unreliable
    implicit clientNumber
    int _type
    int num
    int fade
    float x
    float y
    float z
    receive:
        vec pos(x,y,z);
        regular_particle_splash(_type, num, fade, pos);
end

// Request to enter the server into private edit mode
RequestPrivateEditMode(client->server)
    receive:
        if (!world::get_scenario_code()) return;
        send_NotifyPrivateEditMode(sender);
end

// Notify about entering private edit mode
NotifyPrivateEditMode(server->client)
    implicit clientNumber
    receive:
        conoutf("Server: You are now in private edit mode");
        ClientSystem::editingAlone = true;
end

